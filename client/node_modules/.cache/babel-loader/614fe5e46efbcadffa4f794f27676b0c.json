{"ast":null,"code":"import _toConsumableArray from\"/home/andrew/mtg/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{GET_CARD,DISPLAY_CARD,IS_LOADED,LOAD_DECK,ADD_CARD,MY_CARD,AUTH,MODIFY_DECK,ADD_DECK,DB_CARD,DB_DECK,LOGOUT,ERROR}from\"../actions\";var initialState={isLoaded:true,error:false,auth:false,cardList:[],currentDeck:{name:\"Please Select A Deck\",decklist:[],id:undefined},myDecks:[],myCards:[],decklists:[]};var mtgbuilder=function mtgbuilder(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_CARD:return state;case DISPLAY_CARD:return Object.assign({},state,{cardList:action.cardList});case IS_LOADED:return Object.assign({},state,{isLoaded:action.value});case LOAD_DECK:return Object.assign({},state,{currentDeck:action.deck});case ADD_CARD:return Object.assign({},state,{currentDeck:{name:state.currentDeck.name,decklist:[].concat(_toConsumableArray(state.currentDeck.decklist),[action.card]),id:state.currentDeck.id}});case ADD_DECK:return Object.assign({},state,{myDecks:_toConsumableArray(action.deck)});case MODIFY_DECK:return Object.assign({},state,{currentDeck:{name:state.currentDeck.name,decklist:state.currentDeck.decklist.filter(function(card,index){if(index===action.index){card.quantity+=action.modifier;if(card.quantity>0){return card;}}else{return card;}}),id:state.currentDeck.id}});case DB_DECK:return Object.assign({},state,{decklists:_toConsumableArray(action.decks)});case MY_CARD:return Object.assign({},state,{myCards:[].concat(_toConsumableArray(state.myCards),[action.card])});case DB_CARD:return Object.assign({},state,{myCards:_toConsumableArray(action.cards)});case AUTH:return Object.assign({},state,{auth:action.value});case LOGOUT:return Object.assign({},state,initialState);case ERROR:return Object.assign({},state,{error:action.value});default:return state;}};export default mtgbuilder;","map":{"version":3,"sources":["/home/andrew/mtg/client/src/store/reducers/main.js"],"names":["GET_CARD","DISPLAY_CARD","IS_LOADED","LOAD_DECK","ADD_CARD","MY_CARD","AUTH","MODIFY_DECK","ADD_DECK","DB_CARD","DB_DECK","LOGOUT","ERROR","initialState","isLoaded","error","auth","cardList","currentDeck","name","decklist","id","undefined","myDecks","myCards","decklists","mtgbuilder","state","action","type","Object","assign","value","deck","card","filter","index","quantity","modifier","decks","cards"],"mappings":"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","sourcesContent":["\nimport {GET_CARD, DISPLAY_CARD, IS_LOADED, LOAD_DECK, ADD_CARD, MY_CARD, AUTH, MODIFY_DECK, ADD_DECK, DB_CARD, DB_DECK, LOGOUT, ERROR} from \"../actions\"\n\nconst initialState = {isLoaded:true,\n                        error:false,\n                        auth:false, \n                        cardList:[], \n                        currentDeck:{name:\"Please Select A Deck\", decklist:[], id:undefined}, \n                        myDecks:[], \n                        myCards:[], \n                        decklists:[]}\n\nconst mtgbuilder = (state=initialState, action)=>{\n    switch(action.type){\n        case GET_CARD:\n            return state;\n        case DISPLAY_CARD:\n            return Object.assign({}, state, {cardList: action.cardList})\n        case IS_LOADED:\n            return Object.assign({}, state, {isLoaded: action.value})\n        case LOAD_DECK:\n            return Object.assign({}, state, {currentDeck: action.deck})\n        case ADD_CARD:\n            return Object.assign({}, state, {currentDeck: {name: state.currentDeck.name, decklist: [...state.currentDeck.decklist, action.card], id:state.currentDeck.id}})\n        case ADD_DECK:\n            return Object.assign({}, state, {myDecks:[...action.deck]})\n        case MODIFY_DECK:\n            return Object.assign({}, state, {\n                currentDeck: {name:state.currentDeck.name, decklist:state.currentDeck.decklist.filter((card, index)=>{\n                    if(index===action.index){\n                        card.quantity+= action.modifier;\n                        if(card.quantity>0){\n                            return card\n                        }\n                    }else{\n                        return card\n                    }\n                }), id:state.currentDeck.id}\n            })\n        case DB_DECK:\n            return Object.assign({}, state, {decklists: [...action.decks]})\n        case MY_CARD:\n            return Object.assign({}, state, {myCards: [...state.myCards, action.card]})\n        case DB_CARD:\n            return Object.assign({}, state, {myCards: [...action.cards]})\n        case AUTH:\n            return Object.assign({}, state, {auth: action.value})\n        case LOGOUT:\n            return Object.assign({}, state, initialState)\n        case ERROR:\n            return Object.assign({}, state, {error: action.value})\n        default:\n            return state\n    }\n\n}\nexport default mtgbuilder;"]},"metadata":{},"sourceType":"module"}