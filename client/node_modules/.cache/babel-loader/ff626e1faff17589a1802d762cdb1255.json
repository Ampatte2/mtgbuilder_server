{"ast":null,"code":"import { fetchCard, getLogin, getDeckList, saveToList, getDefault, getRegister, getUser, saveCard, deleteCard } from \"../../api\";\nimport Erasure from \"../../images/Erasure.jpg\";\nimport { getDefaultFlags } from \"mysql2/lib/connection_config\";\nexport const GET_CARD = \"GET_CARD\";\nexport const DISPLAY_CARD = \"DISPLAY_CARD\";\nexport const IS_LOADED = \"IS_LOADED\";\nexport const LOGIN = \"LOGIN\";\nexport const GET_DECK = \"GET_DECK\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const MODIFY_DECK = \"MODIFY_DECK\";\nexport const MY_CARD = \"MY_CARD\";\nexport const REGISTER = \"REGISTER\";\nexport const ERROR = \"ERROR\";\nexport const AUTH = \"AUTH\";\nexport const ADD_DECK = \"ADD_DECK\";\nexport const DB_DECK = \"DB_DECK\";\nexport const LOAD_DECK = \"LOAD_DECK\";\nexport const LOGOUT = \"LOGOUT\";\nexport const DB_CARD = \"DB_CARD\";\nexport function addCard(card) {\n  return {\n    type: ADD_CARD,\n    card\n  };\n}\nexport function modifyDeck(modifier, index) {\n  return {\n    type: MODIFY_DECK,\n    modifier,\n    index\n  };\n}\nexport function displayCard(cardList) {\n  return {\n    type: DISPLAY_CARD,\n    cardList\n  };\n}\nexport function isLoaded(value) {\n  return {\n    type: IS_LOADED,\n    value\n  };\n}\nexport function isError(value) {\n  return {\n    type: ERROR,\n    value\n  };\n}\nexport function isAuth(value) {\n  return {\n    type: AUTH,\n    value\n  };\n}\nexport function logout() {\n  return {\n    type: LOGOUT\n  };\n}\nexport function myCard(card) {\n  return {\n    type: MY_CARD,\n    card\n  };\n}\nexport function addDeck(deck) {\n  return {\n    type: ADD_DECK,\n    deck\n  };\n}\nexport function dbDecks(decks) {\n  return {\n    type: DB_DECK,\n    decks\n  };\n}\nexport function dbCard(cards) {\n  return {\n    type: DB_CARD,\n    cards\n  };\n}\nexport function loadDeck(deck) {\n  return {\n    type: LOAD_DECK,\n    deck\n  };\n}\nexport function saveMyCard(card) {\n  const payload = {\n    card: card,\n    token: localStorage.getItem(\"token\")\n  };\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return saveCard(payload).then(res => {\n      //only adds if card is not duplicate\n      if (res.data.error) {\n        dispatch(myCard(card));\n      }\n\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function deleteMyCard(card) {\n  const payload = {\n    card: card,\n    token: localStorage.getItem(\"token\")\n  };\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return deleteCard(payload).then(res => {\n      dispatch(user(payload.token));\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function login(value) {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return getLogin(value).then(res => {\n      if (res.data.token) {\n        localStorage.setItem(\"token\", res.data.token);\n        dispatch(isError(false));\n        dispatch(user(res.data.token));\n      } else {\n        dispatch(isError(\"Invalid Username Or Password\"));\n      }\n\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function user(token) {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return getUser(token).then(res => {\n      let decks = [];\n      let allDecks = [];\n      let myCards = [];\n      res.data[0].map(item => {\n        decks.push(JSON.parse(item.decklist));\n      });\n      res.data[1].map(item => {\n        myCards.push(JSON.parse(item.card));\n      });\n      res.data[2].map(item => {\n        allDecks.push(JSON.parse(item.decklist));\n      });\n      dispatch(dbDecks(allDecks));\n      dispatch(addDeck(decks));\n      dispatch(dbCard(myCards));\n      dispatch(isAuth(true));\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function getData() {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return getDefault().then(res => {\n      let allDecks = [];\n      res.data.map(item => {\n        allDecks.push(JSON.parse(item.decklist));\n      });\n      dispatch(dbDecks(allDecks));\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function register(value) {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return getRegister(value).then(res => {\n      const token = res.data.token;\n\n      if (res.data.error) {\n        dispatch(isError(\"User Already Exists\"));\n      } else {\n        localStorage.setItem(\"token\", res.data.token);\n        dispatch(isError(false));\n        dispatch(user(token));\n      }\n\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function add(card) {\n  return function (dispatch) {\n    return; //api call here\n  };\n}\nexport function saveDeck(deckName, deck) {\n  const payload = {\n    newDeck: {\n      name: deckName,\n      decklist: deck.decklist\n    },\n    token: localStorage.getItem(\"token\"),\n    id: deck.id\n  };\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    const token = localStorage.getItem(\"token\");\n    return saveToList(payload).then(res => {\n      if (res.data.error) {\n        alert(\"Duplicate Deckname\");\n      } else {\n        dispatch(user(token));\n        alert(\"Decklist Saved\");\n      }\n\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function getDeck(deck) {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return getDeckList({\n      deck\n    }).then(res => {\n      dispatch(loadDeck(res.data.result));\n      dispatch(isLoaded(true));\n    });\n  };\n}\nexport function getCard(query) {\n  return function (dispatch) {\n    dispatch(isLoaded(false));\n    return fetchCard(query).then(res => {\n      //filter the data by assigning it's name to a key in an object and the response object as value of the key\n      let filtered = {};\n\n      if (res.data.cards.length === 0) {\n        filtered = [{\n          name: \"No Cards Found\",\n          imageUrl: Erasure\n        }];\n      } else {\n        res.data.cards.forEach(card => {\n          //Look in the filtered object for the card name key, if undefined save as the card with matching key\n          if (filtered[card.name] === undefined) {\n            filtered[card.name] = card; //if card has no image and the current card from the response has an image save the current card.\n          } else if (filtered[card.name][\"imageUrl\"] === undefined && card.imageUrl) {\n            filtered[card.name] = card;\n          }\n        });\n      }\n\n      dispatch(displayCard(filtered));\n      dispatch(isLoaded(true));\n    });\n  };\n}","map":{"version":3,"sources":["/home/andrew/mtg/client/src/store/actions/index.js"],"names":["fetchCard","getLogin","getDeckList","saveToList","getDefault","getRegister","getUser","saveCard","deleteCard","Erasure","getDefaultFlags","GET_CARD","DISPLAY_CARD","IS_LOADED","LOGIN","GET_DECK","ADD_CARD","MODIFY_DECK","MY_CARD","REGISTER","ERROR","AUTH","ADD_DECK","DB_DECK","LOAD_DECK","LOGOUT","DB_CARD","addCard","card","type","modifyDeck","modifier","index","displayCard","cardList","isLoaded","value","isError","isAuth","logout","myCard","addDeck","deck","dbDecks","decks","dbCard","cards","loadDeck","saveMyCard","payload","token","localStorage","getItem","dispatch","then","res","data","error","deleteMyCard","user","login","setItem","allDecks","myCards","map","item","push","JSON","parse","decklist","getData","register","add","saveDeck","deckName","newDeck","name","id","alert","getDeck","result","getCard","query","filtered","length","imageUrl","forEach","undefined"],"mappings":"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","sourcesContent":["import {fetchCard, getLogin, getDeckList, saveToList, getDefault, getRegister, getUser, saveCard, deleteCard} from \"../../api\"\nimport Erasure from \"../../images/Erasure.jpg\"\nimport { getDefaultFlags } from \"mysql2/lib/connection_config\"\n\nexport const GET_CARD = \"GET_CARD\"\nexport const DISPLAY_CARD = \"DISPLAY_CARD\"\nexport const IS_LOADED = \"IS_LOADED\"\nexport const LOGIN = \"LOGIN\"\nexport const GET_DECK = \"GET_DECK\"\nexport const ADD_CARD = \"ADD_CARD\"\nexport const MODIFY_DECK = \"MODIFY_DECK\"\nexport const MY_CARD = \"MY_CARD\"\nexport const REGISTER = \"REGISTER\"\nexport const ERROR = \"ERROR\"\nexport const AUTH = \"AUTH\"\nexport const ADD_DECK = \"ADD_DECK\"\nexport const DB_DECK = \"DB_DECK\"\nexport const LOAD_DECK = \"LOAD_DECK\"\nexport const LOGOUT = \"LOGOUT\"\nexport const DB_CARD =\"DB_CARD\"\n\n\nexport function addCard(card){\n    return {type: ADD_CARD, card}\n}\n\nexport function modifyDeck(modifier, index){\n    return {type: MODIFY_DECK, modifier, index}\n}\n\nexport function displayCard(cardList){\n    return {type: DISPLAY_CARD, cardList}\n}\n\nexport function isLoaded(value){\n    return {type:IS_LOADED, value}\n}\n\nexport function isError(value){\n    return {type:ERROR, value}\n}\nexport function isAuth(value){\n    return {type:AUTH, value}\n}\n\nexport function logout(){\n    return {type:LOGOUT}\n}\n\nexport function myCard(card){\n    return {type:MY_CARD, card}\n}\n\nexport function addDeck(deck){\n    return {type:ADD_DECK, deck}\n}\nexport function dbDecks(decks){\n    return {type:DB_DECK, decks}\n}\nexport function dbCard(cards){\n    return {type:DB_CARD, cards};\n}\n\nexport function loadDeck(deck){\n    return {type:LOAD_DECK, deck}\n}\n\nexport function saveMyCard(card){\n    const payload = {card: card, token:localStorage.getItem(\"token\")};\n\n    return function(dispatch){\n        dispatch(isLoaded(false));\n        return saveCard(payload).then(res=>{\n\n            //only adds if card is not duplicate\n            if(res.data.error){\n                dispatch(myCard(card))\n            }\n            \n            dispatch(isLoaded(true))\n        })\n    }\n}\n\nexport function deleteMyCard(card){\n    const payload = {card: card, token:localStorage.getItem(\"token\")}\n    return function(dispatch){\n        dispatch(isLoaded(false));\n        return deleteCard(payload).then(res=>{\n            \n            dispatch(user(payload.token))\n            dispatch(isLoaded(true))\n        })\n    }\n}\n\nexport function login(value){\n    return function(dispatch){\n        dispatch(isLoaded(false))\n        return getLogin(value).then(res=>{\n            if(res.data.token){\n                localStorage.setItem(\"token\",res.data.token)\n                dispatch(isError(false))\n                dispatch(user(res.data.token))\n            }else{\n                dispatch(isError(\"Invalid Username Or Password\"))\n            }\n            dispatch(isLoaded(true))\n        })\n        \n    }\n}\n\nexport function user(token){\n    return function(dispatch){\n        dispatch(isLoaded(false))\n        return getUser(token).then(res=>{\n            \n            \n            let decks=[];\n            let allDecks=[];\n            let myCards=[]\n\n            res.data[0].map(item=>{\n                decks.push(JSON.parse(item.decklist))\n            })\n\n            res.data[1].map(item=>{\n                \n                myCards.push(JSON.parse(item.card))\n            })\n\n            res.data[2].map(item=>{\n                allDecks.push(JSON.parse(item.decklist))\n            })\n\n            dispatch(dbDecks(allDecks))\n            dispatch(addDeck(decks))\n            dispatch(dbCard(myCards))\n            dispatch(isAuth(true))\n            dispatch(isLoaded(true))\n\n        })\n    }\n}\n\nexport function getData(){\n    return function(dispatch){\n        dispatch(isLoaded(false))\n        return getDefault().then((res)=>{\n\n            let allDecks=[];\n            \n            res.data.map(item=>{\n                allDecks.push((JSON.parse(item.decklist)))\n            })\n            \n            dispatch(dbDecks(allDecks))\n            dispatch(isLoaded(true))\n        })\n    }\n}\n\nexport function register(value){\n    return function(dispatch){\n        \n        dispatch(isLoaded(false))\n\n        return getRegister(value).then(res=>{\n\n            const token = res.data.token\n            if(res.data.error){\n                dispatch(isError(\"User Already Exists\"))\n            }else{\n                localStorage.setItem(\"token\",res.data.token)\n                dispatch(isError(false))\n                dispatch(user(token))\n            }\n            \n            dispatch(isLoaded(true))\n        }) \n        \n    }\n}\n\nexport function add(card){\n    return function(dispatch){\n        \n        return //api call here\n    }\n}\n\nexport function saveDeck(deckName, deck){\n    \n    const payload = {newDeck: {name:deckName, decklist: deck.decklist}, token:localStorage.getItem(\"token\"), id: deck.id}\n    \n    return function(dispatch){\n\n        dispatch(isLoaded(false))\n        const token = localStorage.getItem(\"token\")\n        return saveToList(payload).then((res)=>{\n            \n            if(res.data.error){\n                alert(\"Duplicate Deckname\")\n            }else{\n                dispatch(user(token))\n                alert(\"Decklist Saved\")\n            }\n            \n            dispatch(isLoaded(true))\n\n        })\n        \n    }\n    \n}\n\nexport function getDeck (deck){\n    return function(dispatch){\n        dispatch(isLoaded(false))\n        return getDeckList({deck}).then((res)=>{\n            \n            dispatch(loadDeck(res.data.result))\n            \n            dispatch(isLoaded(true))\n        })\n        \n    }\n}\n\nexport function getCard (query){\n\n    return function(dispatch){\n\n        dispatch(isLoaded(false))\n\n        return fetchCard(query).then((res)=>{\n            \n            //filter the data by assigning it's name to a key in an object and the response object as value of the key\n            let filtered={};\n            \n            if(res.data.cards.length===0){\n                filtered = [{name:\"No Cards Found\", imageUrl:Erasure}];\n            }else{\n                res.data.cards.forEach((card)=>{\n                    //Look in the filtered object for the card name key, if undefined save as the card with matching key\n                    if(filtered[card.name]===undefined){\n                        filtered[card.name] = card;\n                    //if card has no image and the current card from the response has an image save the current card.\n                    }else if(filtered[card.name][\"imageUrl\"]===undefined && card.imageUrl){\n                        filtered[card.name] = card;\n                    }\n                });\n            }\n            \n\n\n            dispatch(displayCard(filtered))\n\n            dispatch(isLoaded(true))\n\n        })\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}