{"ast":null,"code":"import { GET_CARD, DISPLAY_CARD, IS_LOADED, LOAD_DECK, ADD_CARD, MY_CARD, AUTH, MODIFY_DECK, ADD_DECK, DB_CARD, DB_DECK, LOGOUT, ERROR } from \"../actions\";\nconst initialState = {\n  isLoaded: true,\n  error: false,\n  auth: false,\n  cardList: [],\n  currentDeck: {\n    name: \"Please Select A Deck\",\n    decklist: [],\n    id: undefined\n  },\n  myDecks: [],\n  myCards: [],\n  decklists: []\n};\n\nconst mtgbuilder = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_CARD:\n      return state;\n\n    case DISPLAY_CARD:\n      return Object.assign({}, state, {\n        cardList: action.cardList\n      });\n\n    case IS_LOADED:\n      return Object.assign({}, state, {\n        isLoaded: action.value\n      });\n\n    case LOAD_DECK:\n      return Object.assign({}, state, {\n        currentDeck: action.deck\n      });\n\n    case ADD_CARD:\n      return Object.assign({}, state, {\n        currentDeck: {\n          name: state.currentDeck.name,\n          decklist: [...state.currentDeck.decklist, action.card],\n          id: state.currentDeck.id\n        }\n      });\n\n    case ADD_DECK:\n      return Object.assign({}, state, {\n        myDecks: [...action.deck]\n      });\n\n    case MODIFY_DECK:\n      return Object.assign({}, state, {\n        currentDeck: {\n          name: state.currentDeck.name,\n          decklist: state.currentDeck.decklist.filter((card, index) => {\n            if (index === action.index) {\n              card.quantity += action.modifier;\n\n              if (card.quantity > 0) {\n                return card;\n              }\n            } else {\n              return card;\n            }\n          }),\n          id: state.currentDeck.id\n        }\n      });\n\n    case DB_DECK:\n      return Object.assign({}, state, {\n        decklists: [...action.decks]\n      });\n\n    case MY_CARD:\n      return Object.assign({}, state, {\n        myCards: [...state.myCards, action.card]\n      });\n\n    case DB_CARD:\n      return Object.assign({}, state, {\n        myCards: [...action.cards]\n      });\n\n    case AUTH:\n      return Object.assign({}, state, {\n        auth: action.value\n      });\n\n    case LOGOUT:\n      return Object.assign({}, state, initialState);\n\n    case ERROR:\n      return Object.assign({}, state, {\n        error: action.value\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default mtgbuilder;","map":{"version":3,"sources":["/home/andrew/mtg/client/src/store/reducers/main.js"],"names":["GET_CARD","DISPLAY_CARD","IS_LOADED","LOAD_DECK","ADD_CARD","MY_CARD","AUTH","MODIFY_DECK","ADD_DECK","DB_CARD","DB_DECK","LOGOUT","ERROR","initialState","isLoaded","error","auth","cardList","currentDeck","name","decklist","id","undefined","myDecks","myCards","decklists","mtgbuilder","state","action","type","Object","assign","value","deck","card","filter","index","quantity","modifier","decks","cards"],"mappings":"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","sourcesContent":["\nimport {GET_CARD, DISPLAY_CARD, IS_LOADED, LOAD_DECK, ADD_CARD, MY_CARD, AUTH, MODIFY_DECK, ADD_DECK, DB_CARD, DB_DECK, LOGOUT, ERROR} from \"../actions\"\n\nconst initialState = {isLoaded:true,\n                        error:false,\n                        auth:false, \n                        cardList:[], \n                        currentDeck:{name:\"Please Select A Deck\", decklist:[], id:undefined}, \n                        myDecks:[], \n                        myCards:[], \n                        decklists:[]}\n\nconst mtgbuilder = (state=initialState, action)=>{\n    switch(action.type){\n        case GET_CARD:\n            return state;\n        case DISPLAY_CARD:\n            return Object.assign({}, state, {cardList: action.cardList})\n        case IS_LOADED:\n            return Object.assign({}, state, {isLoaded: action.value})\n        case LOAD_DECK:\n            return Object.assign({}, state, {currentDeck: action.deck})\n        case ADD_CARD:\n            return Object.assign({}, state, {currentDeck: {name: state.currentDeck.name, decklist: [...state.currentDeck.decklist, action.card], id:state.currentDeck.id}})\n        case ADD_DECK:\n            return Object.assign({}, state, {myDecks:[...action.deck]})\n        case MODIFY_DECK:\n            return Object.assign({}, state, {\n                currentDeck: {name:state.currentDeck.name, decklist:state.currentDeck.decklist.filter((card, index)=>{\n                    if(index===action.index){\n                        card.quantity+= action.modifier;\n                        if(card.quantity>0){\n                            return card\n                        }\n                    }else{\n                        return card\n                    }\n                }), id:state.currentDeck.id}\n            })\n        case DB_DECK:\n            return Object.assign({}, state, {decklists: [...action.decks]})\n        case MY_CARD:\n            return Object.assign({}, state, {myCards: [...state.myCards, action.card]})\n        case DB_CARD:\n            return Object.assign({}, state, {myCards: [...action.cards]})\n        case AUTH:\n            return Object.assign({}, state, {auth: action.value})\n        case LOGOUT:\n            return Object.assign({}, state, initialState)\n        case ERROR:\n            return Object.assign({}, state, {error: action.value})\n        default:\n            return state\n    }\n\n}\nexport default mtgbuilder;"]},"metadata":{},"sourceType":"module"}