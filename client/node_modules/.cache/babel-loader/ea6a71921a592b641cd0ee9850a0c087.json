{"ast":null,"code":"var _jsxFileName = \"/home/andrew/mtg/client/src/components/modalDeck.jsx\";\nimport React, { Component } from 'react';\nimport Styled from \"../style/styled\";\nexport default class ModalDeck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      cloneName: \"\"\n    };\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({\n        show: false\n      });\n    }\n  }\n\n  showModal() {\n    if (this.state.show) {\n      this.setState({\n        show: false\n      });\n    } else {\n      this.setState({\n        show: true\n      });\n    }\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClick() {\n    this.props.clone(this.state.cloneName, this.props.deck);\n  }\n\n  handleChange(e) {\n    this.setState({\n      cloneName: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Styled.ModalDeckButton, {\n      onClick: this.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, \"Clone Deck\"), this.state.show && /*#__PURE__*/React.createElement(Styled.CloneModal, {\n      ref: this.setWrapperRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Styled.CloneModalHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, \"Clone \\\"\", this.props.deck.name, \"\\\"\"), /*#__PURE__*/React.createElement(Styled.AccountInput, {\n      type: \"text\",\n      value: this.state.cloneName,\n      placeholder: \"Cloned Deck Name\",\n      onChange: e => this.handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Styled.AccountButton, {\n      onClick: () => this.handleClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, \"Save\")));\n  }\n\n}","map":{"version":3,"sources":["/home/andrew/mtg/client/src/components/modalDeck.jsx"],"names":["React","Component","Styled","ModalDeck","constructor","props","state","show","cloneName","handleClickOutside","bind","setWrapperRef","showModal","componentDidMount","document","addEventListener","componentWillUnmount","event","wrapperRef","contains","target","setState","node","handleClick","clone","deck","handleChange","e","value","render","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Styled from \"../style/styled\"\n\nexport default class ModalDeck extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            show:false,\n            cloneName:\"\"\n        }\n        this.handleClickOutside = this.handleClickOutside.bind(this)\n        this.setWrapperRef = this.setWrapperRef.bind(this);\n        this.showModal = this.showModal.bind(this);\n        \n    }\n\n    componentDidMount(){\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n        \n    }\n    \n    componentWillUnmount(){\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    handleClickOutside(event){\n        \n        if(this.wrapperRef && !this.wrapperRef.contains(event.target)){\n            this.setState({show:false})\n        }\n    }\n\n    showModal(){\n        if(this.state.show){\n            this.setState({show:false})\n        }else{\n            this.setState({show:true})\n        }\n    }\n\n    setWrapperRef(node){\n        this.wrapperRef = node;\n    }\n\n    handleClick(){\n        this.props.clone(this.state.cloneName, this.props.deck)\n    }\n\n    handleChange(e){\n        this.setState({cloneName:e.target.value})\n    }\n\n\n    render() {\n        \n        return (\n            \n            <div>\n                    <Styled.ModalDeckButton onClick={this.showModal}>Clone Deck</Styled.ModalDeckButton>\n                    {this.state.show && \n                        <Styled.CloneModal ref={this.setWrapperRef}> \n                            <Styled.CloneModalHeader>Clone \"{this.props.deck.name}\"</Styled.CloneModalHeader>\n                            <Styled.AccountInput type=\"text\" value={this.state.cloneName} placeholder=\"Cloned Deck Name\" onChange={(e)=>this.handleChange(e)}></Styled.AccountInput>\n                            <Styled.AccountButton onClick={()=>this.handleClick()}>Save</Styled.AccountButton>\n                        </Styled.CloneModal>\n                    }\n                \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}